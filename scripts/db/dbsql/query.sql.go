// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package dbsql

import (
	"context"
	"database/sql"
)

const createPlatformLabDestroy = `-- name: CreatePlatformLabDestroy :one
INSERT INTO platform_lab_destroy (
  id, project_name, repository, username, email, created_at, target_destroy, available
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)RETURNING id, project_name, repository, username, email, available, error_message, target_destroy, created_at, updated_at
`

type CreatePlatformLabDestroyParams struct {
	ID            string `json:"id"`
	ProjectName   string `json:"project_name"`
	Repository    string `json:"repository"`
	Username      string `json:"username"`
	Email         string `json:"email"`
	CreatedAt     string `json:"created_at"`
	TargetDestroy string `json:"target_destroy"`
	Available     bool   `json:"available"`
}

// LabDestroy
func (q *Queries) CreatePlatformLabDestroy(ctx context.Context, arg CreatePlatformLabDestroyParams) (PlatformLabDestroy, error) {
	row := q.db.QueryRowContext(ctx, createPlatformLabDestroy,
		arg.ID,
		arg.ProjectName,
		arg.Repository,
		arg.Username,
		arg.Email,
		arg.CreatedAt,
		arg.TargetDestroy,
		arg.Available,
	)
	var i PlatformLabDestroy
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Repository,
		&i.Username,
		&i.Email,
		&i.Available,
		&i.ErrorMessage,
		&i.TargetDestroy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPlatformRegistry = `-- name: CreatePlatformRegistry :one
INSERT INTO platform_registry (
  id, project_name, repository, username, email, created_at, deleted_at
) VALUES ($1, $2, $3, $4, $5, $6, $7)RETURNING id, project_name, repository, username, email, created_at, deleted_at
`

type CreatePlatformRegistryParams struct {
	ID          string `json:"id"`
	ProjectName string `json:"project_name"`
	Repository  string `json:"repository"`
	Username    string `json:"username"`
	Email       string `json:"email"`
	CreatedAt   string `json:"created_at"`
	DeletedAt   string `json:"deleted_at"`
}

// Registry
func (q *Queries) CreatePlatformRegistry(ctx context.Context, arg CreatePlatformRegistryParams) (PlatformRegistry, error) {
	row := q.db.QueryRowContext(ctx, createPlatformRegistry,
		arg.ID,
		arg.ProjectName,
		arg.Repository,
		arg.Username,
		arg.Email,
		arg.CreatedAt,
		arg.DeletedAt,
	)
	var i PlatformRegistry
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Repository,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllPlatformLabDestroy = `-- name: GetAllPlatformLabDestroy :many
SELECT id, project_name, repository, username, email, created_at, target_destroy, available, error_message, updated_at
FROM platform_lab_destroy
ORDER BY target_destroy DESC, email ASC
`

type GetAllPlatformLabDestroyRow struct {
	ID            string         `json:"id"`
	ProjectName   string         `json:"project_name"`
	Repository    string         `json:"repository"`
	Username      string         `json:"username"`
	Email         string         `json:"email"`
	CreatedAt     string         `json:"created_at"`
	TargetDestroy string         `json:"target_destroy"`
	Available     bool           `json:"available"`
	ErrorMessage  sql.NullString `json:"error_message"`
	UpdatedAt     sql.NullString `json:"updated_at"`
}

func (q *Queries) GetAllPlatformLabDestroy(ctx context.Context) ([]GetAllPlatformLabDestroyRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlatformLabDestroy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlatformLabDestroyRow
	for rows.Next() {
		var i GetAllPlatformLabDestroyRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.Repository,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.TargetDestroy,
			&i.Available,
			&i.ErrorMessage,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlatformRegistry = `-- name: GetAllPlatformRegistry :many
SELECT id, project_name, repository, username, email, created_at, deleted_at
FROM platform_registry
ORDER BY deleted_at DESC, email ASC
`

func (q *Queries) GetAllPlatformRegistry(ctx context.Context) ([]PlatformRegistry, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlatformRegistry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlatformRegistry
	for rows.Next() {
		var i PlatformRegistry
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.Repository,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByFilterPlatformLabDestroy = `-- name: GetByFilterPlatformLabDestroy :many
SELECT id, project_name, repository, username, email, created_at, target_destroy, available, error_message, updated_at
FROM platform_lab_destroy
WHERE
 ($1::bool = FALSE OR project_name LIKE '%' || COALESCE(NULLIF($2::text, '') || '%', project_name))
  AND ($3::bool = FALSE OR repository LIKE '%' || COALESCE(NULLIF($4::text, '') || '%', repository))
  AND ($5::bool = FALSE OR username LIKE '%' || COALESCE(NULLIF($6::text, '') || '%', username))
  AND ($7::bool = FALSE OR email LIKE '%' || COALESCE(NULLIF($8::text, '') || '%', email))
  AND ($9::bool = FALSE OR available = $10)
ORDER BY target_destroy DESC, email ASC
`

type GetByFilterPlatformLabDestroyParams struct {
	IsProjectName bool   `json:"is_project_name"`
	ProjectName   string `json:"project_name"`
	IsRepository  bool   `json:"is_repository"`
	Repository    string `json:"repository"`
	IsUsername    bool   `json:"is_username"`
	Username      string `json:"username"`
	IsEmail       bool   `json:"is_email"`
	Email         string `json:"email"`
	IsAvailable   bool   `json:"is_available"`
	Available     bool   `json:"available"`
}

type GetByFilterPlatformLabDestroyRow struct {
	ID            string         `json:"id"`
	ProjectName   string         `json:"project_name"`
	Repository    string         `json:"repository"`
	Username      string         `json:"username"`
	Email         string         `json:"email"`
	CreatedAt     string         `json:"created_at"`
	TargetDestroy string         `json:"target_destroy"`
	Available     bool           `json:"available"`
	ErrorMessage  sql.NullString `json:"error_message"`
	UpdatedAt     sql.NullString `json:"updated_at"`
}

func (q *Queries) GetByFilterPlatformLabDestroy(ctx context.Context, arg GetByFilterPlatformLabDestroyParams) ([]GetByFilterPlatformLabDestroyRow, error) {
	rows, err := q.db.QueryContext(ctx, getByFilterPlatformLabDestroy,
		arg.IsProjectName,
		arg.ProjectName,
		arg.IsRepository,
		arg.Repository,
		arg.IsUsername,
		arg.Username,
		arg.IsEmail,
		arg.Email,
		arg.IsAvailable,
		arg.Available,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetByFilterPlatformLabDestroyRow
	for rows.Next() {
		var i GetByFilterPlatformLabDestroyRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.Repository,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.TargetDestroy,
			&i.Available,
			&i.ErrorMessage,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByFilterPlatformRegistry = `-- name: GetByFilterPlatformRegistry :many
SELECT id, project_name, repository, username, email, created_at, deleted_at
FROM platform_registry
WHERE
 ($1::bool = FALSE OR project_name LIKE '%' || COALESCE(NULLIF($2::text, '') || '%', project_name))
  AND ($3::bool = FALSE OR repository LIKE '%' || COALESCE(NULLIF($4::text, '') || '%', repository))
  AND ($5::bool = FALSE OR username LIKE '%' || COALESCE(NULLIF($6::text, '') || '%', username))
  AND ($7::bool = FALSE OR email LIKE '%' || COALESCE(NULLIF($8::text, '') || '%', email))
ORDER BY deleted_at DESC, email ASC
`

type GetByFilterPlatformRegistryParams struct {
	IsProjectName bool   `json:"is_project_name"`
	ProjectName   string `json:"project_name"`
	IsRepository  bool   `json:"is_repository"`
	Repository    string `json:"repository"`
	IsUsername    bool   `json:"is_username"`
	Username      string `json:"username"`
	IsEmail       bool   `json:"is_email"`
	Email         string `json:"email"`
}

func (q *Queries) GetByFilterPlatformRegistry(ctx context.Context, arg GetByFilterPlatformRegistryParams) ([]PlatformRegistry, error) {
	rows, err := q.db.QueryContext(ctx, getByFilterPlatformRegistry,
		arg.IsProjectName,
		arg.ProjectName,
		arg.IsRepository,
		arg.Repository,
		arg.IsUsername,
		arg.Username,
		arg.IsEmail,
		arg.Email,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlatformRegistry
	for rows.Next() {
		var i PlatformRegistry
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.Repository,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByIDPlatformLabDestroy = `-- name: GetByIDPlatformLabDestroy :one
SELECT id, project_name, repository, username, email, created_at, target_destroy, available, error_message, updated_at
FROM platform_lab_destroy
WHERE id=$1
ORDER BY email ASC
`

type GetByIDPlatformLabDestroyRow struct {
	ID            string         `json:"id"`
	ProjectName   string         `json:"project_name"`
	Repository    string         `json:"repository"`
	Username      string         `json:"username"`
	Email         string         `json:"email"`
	CreatedAt     string         `json:"created_at"`
	TargetDestroy string         `json:"target_destroy"`
	Available     bool           `json:"available"`
	ErrorMessage  sql.NullString `json:"error_message"`
	UpdatedAt     sql.NullString `json:"updated_at"`
}

func (q *Queries) GetByIDPlatformLabDestroy(ctx context.Context, id string) (GetByIDPlatformLabDestroyRow, error) {
	row := q.db.QueryRowContext(ctx, getByIDPlatformLabDestroy, id)
	var i GetByIDPlatformLabDestroyRow
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Repository,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.TargetDestroy,
		&i.Available,
		&i.ErrorMessage,
		&i.UpdatedAt,
	)
	return i, err
}

const getByIDPlatformRegistry = `-- name: GetByIDPlatformRegistry :one
SELECT id, project_name, repository, username, email, created_at, deleted_at
FROM platform_registry
WHERE id=$1
ORDER BY email ASC
`

func (q *Queries) GetByIDPlatformRegistry(ctx context.Context, id string) (PlatformRegistry, error) {
	row := q.db.QueryRowContext(ctx, getByIDPlatformRegistry, id)
	var i PlatformRegistry
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Repository,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const patchlatformLabDestroy = `-- name: PatchlatformLabDestroy :one
UPDATE platform_lab_destroy
SET 
  available=$2, 
  error_message = COALESCE(NULLIF($4::text, ''), error_message),
  updated_at=$3
WHERE id=$1 RETURNING id, project_name, repository, username, email, available, error_message, target_destroy, created_at, updated_at
`

type PatchlatformLabDestroyParams struct {
	ID           string         `json:"id"`
	Available    bool           `json:"available"`
	UpdatedAt    sql.NullString `json:"updated_at"`
	ErrorMessage string         `json:"error_message"`
}

func (q *Queries) PatchlatformLabDestroy(ctx context.Context, arg PatchlatformLabDestroyParams) (PlatformLabDestroy, error) {
	row := q.db.QueryRowContext(ctx, patchlatformLabDestroy,
		arg.ID,
		arg.Available,
		arg.UpdatedAt,
		arg.ErrorMessage,
	)
	var i PlatformLabDestroy
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Repository,
		&i.Username,
		&i.Email,
		&i.Available,
		&i.ErrorMessage,
		&i.TargetDestroy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
